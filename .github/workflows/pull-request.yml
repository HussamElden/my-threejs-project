name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  validate-pr:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: coffee_shop_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout PR code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/coffee_shop_test" >> $GITHUB_ENV
        echo "NODE_ENV=test" >> $GITHUB_ENV

    - name: Generate Prisma Client
      run: npx prisma generate

    - name: Run database migrations
      run: npx prisma migrate deploy

    - name: Run all tests with detailed output
      run: npm run test:verbose

    - name: Comment test results on PR
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const { execSync } = require('child_process');
          
          // Get test results
          let testOutput;
          try {
            testOutput = execSync('npm test -- --watchAll=false 2>&1', { encoding: 'utf8' });
          } catch (error) {
            testOutput = error.stdout;
          }
          
          // Create comment body
          const body = `## 🧪 Test Results for PR #${{ github.event.number }}
          
          **Commit:** \`${{ github.event.pull_request.head.sha }}\`
          
          <details>
          <summary>Click to see test output</summary>
          
          \`\`\`
          ${testOutput}
          \`\`\`
          
          </details>
          
          ${testOutput.includes('PASS') ? '✅ Tests passed!' : '❌ Some tests failed!'}
          `;
          
          // Post comment
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

    - name: Check for API changes
      run: |
        echo "Checking for API changes..."
        git diff --name-only origin/main..HEAD | grep -E "pages/api|lib/" > changed_files.txt || true
        if [ -s changed_files.txt ]; then
          echo "API changes detected:"
          cat changed_files.txt
          echo "::notice::API files have been modified. Make sure tests cover all changes."
        fi

    - name: Validate build (lenient)
      run: |
        echo "DATABASE_URL=postgresql://placeholder:placeholder@localhost:5432/placeholder" >> $GITHUB_ENV
        echo "NODE_ENV=production" >> $GITHUB_ENV
        echo "CI=true" >> $GITHUB_ENV
        npm run build
      continue-on-error: true
